//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace TTC2018.LiveContest.SocialNetwork
{
    
    
    /// <summary>
    /// The default implementation of the Submission class
    /// </summary>
    [XmlIdentifierAttribute("id")]
    [XmlNamespaceAttribute("https://www.transformation-tool-contest.eu/2018/social_media")]
    [XmlNamespacePrefixAttribute("social")]
    [ModelRepresentationClassAttribute("https://www.transformation-tool-contest.eu/2018/social_media#//Submission")]
    [DebuggerDisplayAttribute("Submission {Id}")]
    public abstract partial class Submission : ModelElement, ISubmission, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Id property
        /// </summary>
        private string _id;
        
        private static Lazy<ITypedElement> _idAttribute = new Lazy<ITypedElement>(RetrieveIdAttribute);
        
        /// <summary>
        /// The backing field for the Timestamp property
        /// </summary>
        private DateTime _timestamp;
        
        private static Lazy<ITypedElement> _timestampAttribute = new Lazy<ITypedElement>(RetrieveTimestampAttribute);
        
        /// <summary>
        /// The backing field for the Content property
        /// </summary>
        private string _content;
        
        private static Lazy<ITypedElement> _contentAttribute = new Lazy<ITypedElement>(RetrieveContentAttribute);
        
        private static Lazy<ITypedElement> _submitterReference = new Lazy<ITypedElement>(RetrieveSubmitterReference);
        
        /// <summary>
        /// The backing field for the Submitter property
        /// </summary>
        private IUser _submitter;
        
        private static Lazy<ITypedElement> _commentsReference = new Lazy<ITypedElement>(RetrieveCommentsReference);
        
        /// <summary>
        /// The backing field for the Comments property
        /// </summary>
        private SubmissionCommentsCollection _comments;
        
        private static IClass _classInstance;
        
        public Submission()
        {
            this._comments = new SubmissionCommentsCollection(this);
            this._comments.CollectionChanging += this.CommentsCollectionChanging;
            this._comments.CollectionChanged += this.CommentsCollectionChanged;
        }
        
        /// <summary>
        /// The id property
        /// </summary>
        [DisplayNameAttribute("id")]
        [CategoryAttribute("Submission")]
        [XmlElementNameAttribute("id")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        public string Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    string old = this._id;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIdChanging(e);
                    this.OnPropertyChanging("Id", e, _idAttribute);
                    this._id = value;
                    this.OnIdChanged(e);
                    this.OnPropertyChanged("Id", e, _idAttribute);
                }
            }
        }
        
        /// <summary>
        /// The timestamp property
        /// </summary>
        [TypeConverterAttribute(typeof(IsoDateTimeConverter))]
        [DisplayNameAttribute("timestamp")]
        [CategoryAttribute("Submission")]
        [XmlElementNameAttribute("timestamp")]
        [XmlAttributeAttribute(true)]
        public DateTime Timestamp
        {
            get
            {
                return this._timestamp;
            }
            set
            {
                if ((this._timestamp != value))
                {
                    DateTime old = this._timestamp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTimestampChanging(e);
                    this.OnPropertyChanging("Timestamp", e, _timestampAttribute);
                    this._timestamp = value;
                    this.OnTimestampChanged(e);
                    this.OnPropertyChanged("Timestamp", e, _timestampAttribute);
                }
            }
        }
        
        /// <summary>
        /// The content property
        /// </summary>
        [DisplayNameAttribute("content")]
        [CategoryAttribute("Submission")]
        [XmlElementNameAttribute("content")]
        [XmlAttributeAttribute(true)]
        public string Content
        {
            get
            {
                return this._content;
            }
            set
            {
                if ((this._content != value))
                {
                    string old = this._content;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnContentChanging(e);
                    this.OnPropertyChanging("Content", e, _contentAttribute);
                    this._content = value;
                    this.OnContentChanged(e);
                    this.OnPropertyChanged("Content", e, _contentAttribute);
                }
            }
        }
        
        /// <summary>
        /// The submitter property
        /// </summary>
        [DisplayNameAttribute("submitter")]
        [CategoryAttribute("Submission")]
        [XmlElementNameAttribute("submitter")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("submissions")]
        public IUser Submitter
        {
            get
            {
                return this._submitter;
            }
            set
            {
                if ((this._submitter != value))
                {
                    IUser old = this._submitter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSubmitterChanging(e);
                    this.OnPropertyChanging("Submitter", e, _submitterReference);
                    this._submitter = value;
                    if ((old != null))
                    {
                        old.Submissions.Remove(this);
                        old.Deleted -= this.OnResetSubmitter;
                    }
                    if ((value != null))
                    {
                        value.Submissions.Add(this);
                        value.Deleted += this.OnResetSubmitter;
                    }
                    this.OnSubmitterChanged(e);
                    this.OnPropertyChanged("Submitter", e, _submitterReference);
                }
            }
        }
        
        /// <summary>
        /// The comments property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("comments")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("commented")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IComment> Comments
        {
            get
            {
                return this._comments;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new SubmissionChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new SubmissionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("https://www.transformation-tool-contest.eu/2018/social_media#//Submission")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the current model element can be identified by an attribute value
        /// </summary>
        public override bool IsIdentified
        {
            get
            {
                return true;
            }
        }
        
        /// <summary>
        /// Gets fired before the Id property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdChanging;
        
        /// <summary>
        /// Gets fired when the Id property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdChanged;
        
        /// <summary>
        /// Gets fired before the Timestamp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimestampChanging;
        
        /// <summary>
        /// Gets fired when the Timestamp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimestampChanged;
        
        /// <summary>
        /// Gets fired before the Content property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ContentChanging;
        
        /// <summary>
        /// Gets fired when the Content property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ContentChanged;
        
        /// <summary>
        /// Gets fired before the Submitter property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubmitterChanging;
        
        /// <summary>
        /// Gets fired when the Submitter property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubmitterChanged;
        
        private static ITypedElement RetrieveIdAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Submission.ClassInstance)).Resolve("id")));
        }
        
        /// <summary>
        /// Raises the IdChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IdChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTimestampAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Submission.ClassInstance)).Resolve("timestamp")));
        }
        
        /// <summary>
        /// Raises the TimestampChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimestampChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimestampChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimestampChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimestampChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimestampChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveContentAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Submission.ClassInstance)).Resolve("content")));
        }
        
        /// <summary>
        /// Raises the ContentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnContentChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ContentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ContentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnContentChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ContentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSubmitterReference()
        {
            return ((ITypedElement)(((ModelElement)(Submission.ClassInstance)).Resolve("submitter")));
        }
        
        /// <summary>
        /// Raises the SubmitterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubmitterChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubmitterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SubmitterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubmitterChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubmitterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Submitter property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSubmitter(object sender, System.EventArgs eventArgs)
        {
            this.Submitter = null;
        }
        
        private static ITypedElement RetrieveCommentsReference()
        {
            return ((ITypedElement)(((ModelElement)(Submission.ClassInstance)).Resolve("comments")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Comments property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CommentsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Comments", e, _commentsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Comments property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CommentsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Comments", e, _commentsReference);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int commentsIndex = ModelHelper.IndexOfReference(this.Comments, element);
            if ((commentsIndex != -1))
            {
                return ModelHelper.CreatePath("comments", commentsIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "SUBMITTER"))
            {
                return this.Submitter;
            }
            if ((reference == "COMMENTS"))
            {
                if ((index < this.Comments.Count))
                {
                    return this.Comments[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ID"))
            {
                return this.Id;
            }
            if ((attribute == "TIMESTAMP"))
            {
                return this.Timestamp;
            }
            if ((attribute == "CONTENT"))
            {
                return this.Content;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "COMMENTS"))
            {
                return this._comments;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SUBMITTER"))
            {
                this.Submitter = ((IUser)(value));
                return;
            }
            if ((feature == "ID"))
            {
                this.Id = ((string)(value));
                return;
            }
            if ((feature == "TIMESTAMP"))
            {
                this.Timestamp = ((System.DateTime)(value));
                return;
            }
            if ((feature == "CONTENT"))
            {
                this.Content = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ID"))
            {
                return new IdProxy(this);
            }
            if ((attribute == "TIMESTAMP"))
            {
                return Observable.Box(new TimestampProxy(this));
            }
            if ((attribute == "CONTENT"))
            {
                return new ContentProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "SUBMITTER"))
            {
                return new SubmitterProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._comments))
            {
                return "comments";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("https://www.transformation-tool-contest.eu/2018/social_media#//Submission")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Gets the identifier string for this model element
        /// </summary>
        /// <returns>The identifier string</returns>
        public override string ToIdentifierString()
        {
            if ((this.Id == null))
            {
                return null;
            }
            return this.Id.ToString();
        }
        
        protected override Uri CreateUriWithFragment(string fragment, bool absolute, IModelElement baseElement)
        {
            return this.CreateUriFromGlobalIdentifier(fragment, absolute);
        }
        
        protected override void PropagateNewModel(Model newModel, Model oldModel, IModelElement subtreeRoot)
        {
            string id = this.ToIdentifierString();
            if ((oldModel != null))
            {
                oldModel.UnregisterId(id);
            }
            if ((newModel != null))
            {
                newModel.RegisterId(id, this);
            }
            base.PropagateNewModel(newModel, oldModel, subtreeRoot);
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Submission class
        /// </summary>
        public class SubmissionChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Submission _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SubmissionChildrenCollection(Submission parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Comments.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Comments.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Comments.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IComment commentsCasted = item.As<IComment>();
                if ((commentsCasted != null))
                {
                    this._parent.Comments.Add(commentsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Comments.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Comments.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> commentsEnumerator = this._parent.Comments.GetEnumerator();
                try
                {
                    for (
                    ; commentsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = commentsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    commentsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IComment commentItem = item.As<IComment>();
                if (((commentItem != null) 
                            && this._parent.Comments.Remove(commentItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Comments).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Submission class
        /// </summary>
        public class SubmissionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Submission _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SubmissionReferencedElementsCollection(Submission parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Submitter != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Comments.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.SubmitterChanged += this.PropagateValueChanges;
                this._parent.Comments.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.SubmitterChanged -= this.PropagateValueChanges;
                this._parent.Comments.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Submitter == null))
                {
                    IUser submitterCasted = item.As<IUser>();
                    if ((submitterCasted != null))
                    {
                        this._parent.Submitter = submitterCasted;
                        return;
                    }
                }
                IComment commentsCasted = item.As<IComment>();
                if ((commentsCasted != null))
                {
                    this._parent.Comments.Add(commentsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Submitter = null;
                this._parent.Comments.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Submitter))
                {
                    return true;
                }
                if (this._parent.Comments.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Submitter != null))
                {
                    array[arrayIndex] = this._parent.Submitter;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> commentsEnumerator = this._parent.Comments.GetEnumerator();
                try
                {
                    for (
                    ; commentsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = commentsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    commentsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Submitter == item))
                {
                    this._parent.Submitter = null;
                    return true;
                }
                IComment commentItem = item.As<IComment>();
                if (((commentItem != null) 
                            && this._parent.Comments.Remove(commentItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Submitter).Concat(this._parent.Comments).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the id property
        /// </summary>
        private sealed class IdProxy : ModelPropertyChange<ISubmission, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IdProxy(ISubmission modelElement) : 
                    base(modelElement, "id")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Id;
                }
                set
                {
                    this.ModelElement.Id = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the timestamp property
        /// </summary>
        private sealed class TimestampProxy : ModelPropertyChange<ISubmission, System.DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TimestampProxy(ISubmission modelElement) : 
                    base(modelElement, "timestamp")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override System.DateTime Value
            {
                get
                {
                    return this.ModelElement.Timestamp;
                }
                set
                {
                    this.ModelElement.Timestamp = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the content property
        /// </summary>
        private sealed class ContentProxy : ModelPropertyChange<ISubmission, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ContentProxy(ISubmission modelElement) : 
                    base(modelElement, "content")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Content;
                }
                set
                {
                    this.ModelElement.Content = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the submitter property
        /// </summary>
        private sealed class SubmitterProxy : ModelPropertyChange<ISubmission, IUser>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SubmitterProxy(ISubmission modelElement) : 
                    base(modelElement, "submitter")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IUser Value
            {
                get
                {
                    return this.ModelElement.Submitter;
                }
                set
                {
                    this.ModelElement.Submitter = value;
                }
            }
        }
    }
}

