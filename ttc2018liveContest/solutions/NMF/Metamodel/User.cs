//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace TTC2018.LiveContest.SocialNetwork
{
    
    
    /// <summary>
    /// The default implementation of the User class
    /// </summary>
    [XmlIdentifierAttribute("id")]
    [XmlNamespaceAttribute("https://www.transformation-tool-contest.eu/2018/social_media")]
    [XmlNamespacePrefixAttribute("social")]
    [ModelRepresentationClassAttribute("https://www.transformation-tool-contest.eu/2018/social_media#//User")]
    [DebuggerDisplayAttribute("User {Id}")]
    public partial class User : ModelElement, IUser, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Id property
        /// </summary>
        private string _id;
        
        private static Lazy<ITypedElement> _idAttribute = new Lazy<ITypedElement>(RetrieveIdAttribute);
        
        /// <summary>
        /// The backing field for the Name property
        /// </summary>
        private string _name;
        
        private static Lazy<ITypedElement> _nameAttribute = new Lazy<ITypedElement>(RetrieveNameAttribute);
        
        private static Lazy<ITypedElement> _submissionsReference = new Lazy<ITypedElement>(RetrieveSubmissionsReference);
        
        /// <summary>
        /// The backing field for the Submissions property
        /// </summary>
        private UserSubmissionsCollection _submissions;
        
        private static Lazy<ITypedElement> _likesReference = new Lazy<ITypedElement>(RetrieveLikesReference);
        
        /// <summary>
        /// The backing field for the Likes property
        /// </summary>
        private UserLikesCollection _likes;
        
        private static Lazy<ITypedElement> _friendsReference = new Lazy<ITypedElement>(RetrieveFriendsReference);
        
        /// <summary>
        /// The backing field for the Friends property
        /// </summary>
        private ObservableAssociationSet<IUser> _friends;
        
        private static IClass _classInstance;
        
        public User()
        {
            this._submissions = new UserSubmissionsCollection(this);
            this._submissions.CollectionChanging += this.SubmissionsCollectionChanging;
            this._submissions.CollectionChanged += this.SubmissionsCollectionChanged;
            this._likes = new UserLikesCollection(this);
            this._likes.CollectionChanging += this.LikesCollectionChanging;
            this._likes.CollectionChanged += this.LikesCollectionChanged;
            this._friends = new ObservableAssociationSet<IUser>();
            this._friends.CollectionChanging += this.FriendsCollectionChanging;
            this._friends.CollectionChanged += this.FriendsCollectionChanged;
        }
        
        /// <summary>
        /// The id property
        /// </summary>
        [DisplayNameAttribute("id")]
        [CategoryAttribute("User")]
        [XmlElementNameAttribute("id")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        public string Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    string old = this._id;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIdChanging(e);
                    this.OnPropertyChanging("Id", e, _idAttribute);
                    this._id = value;
                    this.OnIdChanged(e);
                    this.OnPropertyChanged("Id", e, _idAttribute);
                }
            }
        }
        
        /// <summary>
        /// The name property
        /// </summary>
        [DisplayNameAttribute("name")]
        [CategoryAttribute("User")]
        [XmlElementNameAttribute("name")]
        [XmlAttributeAttribute(true)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    string old = this._name;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNameChanging(e);
                    this.OnPropertyChanging("Name", e, _nameAttribute);
                    this._name = value;
                    this.OnNameChanged(e);
                    this.OnPropertyChanged("Name", e, _nameAttribute);
                }
            }
        }
        
        /// <summary>
        /// The submissions property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("submissions")]
        [CategoryAttribute("User")]
        [XmlElementNameAttribute("submissions")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("submitter")]
        [ConstantAttribute()]
        public ISetExpression<ISubmission> Submissions
        {
            get
            {
                return this._submissions;
            }
        }
        
        /// <summary>
        /// The likes property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("likes")]
        [CategoryAttribute("User")]
        [XmlElementNameAttribute("likes")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("likedBy")]
        [ConstantAttribute()]
        public ISetExpression<IComment> Likes
        {
            get
            {
                return this._likes;
            }
        }
        
        /// <summary>
        /// The friends property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("friends")]
        [CategoryAttribute("User")]
        [XmlElementNameAttribute("friends")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public ISetExpression<IUser> Friends
        {
            get
            {
                return this._friends;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new UserReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("https://www.transformation-tool-contest.eu/2018/social_media#//User")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the current model element can be identified by an attribute value
        /// </summary>
        public override bool IsIdentified
        {
            get
            {
                return true;
            }
        }
        
        /// <summary>
        /// Gets fired before the Id property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdChanging;
        
        /// <summary>
        /// Gets fired when the Id property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdChanged;
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanging;
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanged;
        
        private static ITypedElement RetrieveIdAttribute()
        {
            return ((ITypedElement)(((ModelElement)(User.ClassInstance)).Resolve("id")));
        }
        
        /// <summary>
        /// Raises the IdChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IdChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveNameAttribute()
        {
            return ((ITypedElement)(((ModelElement)(User.ClassInstance)).Resolve("name")));
        }
        
        /// <summary>
        /// Raises the NameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSubmissionsReference()
        {
            return ((ITypedElement)(((ModelElement)(User.ClassInstance)).Resolve("submissions")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Submissions property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SubmissionsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Submissions", e, _submissionsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Submissions property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SubmissionsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Submissions", e, _submissionsReference);
        }
        
        private static ITypedElement RetrieveLikesReference()
        {
            return ((ITypedElement)(((ModelElement)(User.ClassInstance)).Resolve("likes")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Likes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LikesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Likes", e, _likesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Likes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LikesCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Likes", e, _likesReference);
        }
        
        private static ITypedElement RetrieveFriendsReference()
        {
            return ((ITypedElement)(((ModelElement)(User.ClassInstance)).Resolve("friends")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Friends property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FriendsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Friends", e, _friendsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Friends property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FriendsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Friends", e, _friendsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ID"))
            {
                return this.Id;
            }
            if ((attribute == "NAME"))
            {
                return this.Name;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "SUBMISSIONS"))
            {
                return this._submissions;
            }
            if ((feature == "LIKES"))
            {
                return this._likes;
            }
            if ((feature == "FRIENDS"))
            {
                return this._friends;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ID"))
            {
                this.Id = ((string)(value));
                return;
            }
            if ((feature == "NAME"))
            {
                this.Name = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ID"))
            {
                return new IdProxy(this);
            }
            if ((attribute == "NAME"))
            {
                return new NameProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("https://www.transformation-tool-contest.eu/2018/social_media#//User")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Gets the identifier string for this model element
        /// </summary>
        /// <returns>The identifier string</returns>
        public override string ToIdentifierString()
        {
            if ((this.Id == null))
            {
                return null;
            }
            return this.Id.ToString();
        }
        
        protected override Uri CreateUriWithFragment(string fragment, bool absolute, IModelElement baseElement)
        {
            return this.CreateUriFromGlobalIdentifier(fragment, absolute);
        }
        
        protected override void PropagateNewModel(Model newModel, Model oldModel, IModelElement subtreeRoot)
        {
            string id = this.ToIdentifierString();
            if ((oldModel != null))
            {
                oldModel.UnregisterId(id);
            }
            if ((newModel != null))
            {
                newModel.RegisterId(id, this);
            }
            base.PropagateNewModel(newModel, oldModel, subtreeRoot);
        }
        
        /// <summary>
        /// The collection class to to represent the children of the User class
        /// </summary>
        public class UserReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private User _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public UserReferencedElementsCollection(User parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Submissions.Count);
                    count = (count + this._parent.Likes.Count);
                    count = (count + this._parent.Friends.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Submissions.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Likes.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Friends.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Submissions.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Likes.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Friends.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ISubmission submissionsCasted = item.As<ISubmission>();
                if ((submissionsCasted != null))
                {
                    this._parent.Submissions.Add(submissionsCasted);
                }
                IComment likesCasted = item.As<IComment>();
                if ((likesCasted != null))
                {
                    this._parent.Likes.Add(likesCasted);
                }
                IUser friendsCasted = item.As<IUser>();
                if ((friendsCasted != null))
                {
                    this._parent.Friends.Add(friendsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Submissions.Clear();
                this._parent.Likes.Clear();
                this._parent.Friends.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Submissions.Contains(item))
                {
                    return true;
                }
                if (this._parent.Likes.Contains(item))
                {
                    return true;
                }
                if (this._parent.Friends.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> submissionsEnumerator = this._parent.Submissions.GetEnumerator();
                try
                {
                    for (
                    ; submissionsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = submissionsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    submissionsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> likesEnumerator = this._parent.Likes.GetEnumerator();
                try
                {
                    for (
                    ; likesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = likesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    likesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> friendsEnumerator = this._parent.Friends.GetEnumerator();
                try
                {
                    for (
                    ; friendsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = friendsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    friendsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ISubmission submissionItem = item.As<ISubmission>();
                if (((submissionItem != null) 
                            && this._parent.Submissions.Remove(submissionItem)))
                {
                    return true;
                }
                IComment commentItem = item.As<IComment>();
                if (((commentItem != null) 
                            && this._parent.Likes.Remove(commentItem)))
                {
                    return true;
                }
                IUser userItem = item.As<IUser>();
                if (((userItem != null) 
                            && this._parent.Friends.Remove(userItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Submissions).Concat(this._parent.Likes).Concat(this._parent.Friends).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the id property
        /// </summary>
        private sealed class IdProxy : ModelPropertyChange<IUser, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IdProxy(IUser modelElement) : 
                    base(modelElement, "id")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Id;
                }
                set
                {
                    this.ModelElement.Id = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the name property
        /// </summary>
        private sealed class NameProxy : ModelPropertyChange<IUser, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NameProxy(IUser modelElement) : 
                    base(modelElement, "name")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Name;
                }
                set
                {
                    this.ModelElement.Name = value;
                }
            }
        }
    }
}

